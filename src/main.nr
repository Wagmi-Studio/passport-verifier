use dep::std::println;
use dep::biguint::BigUint56;
use dep::rsa::{verify_rsa_sha256_pkcs1v15};
use dep::std::hash::sha256;
use dep::date::Date;

/**
* WARNING: while the signatures are checked and the age is verified,
* there are some checks missing in this code that are needed to make 
* it robust enough to prevent the prover from cheating. The necessary 
* checks will be added soon.
*/

global MRZ_COUNTRY_INDEX = 54;
global MRZ_BIRTHDATE_INDEX = 57;
global MRZ_GENDER_INDEX = 64;
global MRZ_EXPIRY_DATE_INDEX = 65;

mod utils;

struct PassportData {
    // Result of multiple hashing and padding of the passport data
    e_content: [u8; 104],
    // The signature of the passport data
    encrypted_digest: [u8; 256],
    encoded_data: [u8; 2271],
    mrz: str<88>,
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 256],
    quotient: [u8; 256],
}

struct DSCData {
    // The public key of the Document Signing Certificate (DSC)
    // Most likely a 2048-bit RSA key, so that's the size we set here
    // 256 bytes = 2048 bits
    pubkey: [u8; 256],
    // The signature of the DSC TBS certificate by the CSCA certificate
    // 512 bytes = 4096 bits
    signature: [u8; 512],
    // The TBS certificate of the DSC
    // TBS stands for To Be Signed
    tbs_certificate: [u8; 888],
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 512],
    quotient: [u8; 512],
}

struct CSCACertData {
    // The public key of the Country Signing Certificate Authority (CSCA)
    // Most likely a 4096-bit RSA key, so that's the size we set here
    // 512 bytes = 4096 bits
    pubkey: [u8; 512],
}

// Reverse the bytes of an array so you can switch from
// big endian to little endian order and vice versa
fn reverse_bytes_array<N>(arr: [u8; N]) -> [u8; N] {
    let mut reversed_arr = [0 as u8; N];
    for i in 0..N {
        // Reverse
        reversed_arr[i] = arr[N - 1 - i];
    }
    reversed_arr
}

fn verify_passport_signature(passport_data: PassportData, dsc_data: DSCData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.encrypted_digest));
    let pubkey_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.quotient));

    let msg_hash = sha256(passport_data.e_content);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn verify_dsc_signature(dsc_data: DSCData, csca_cert_data: CSCACertData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.signature));
    let pubkey_biguint = BigUint56::from_bytes(reverse_bytes_array(csca_cert_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.quotient));

    let msg_hash = sha256(dsc_data.tbs_certificate);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn check_expiry(passport_data: PassportData, current_date_bytes: [u8; 8]) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let threshold_year = Date::new(2070, 1, 1);
    let threshold_year_bytes = threshold_year.to_bytes();

    let current_date = Date::from_bytes_long_year(current_date_bytes);

    let expiry_date_bytes = utils::get_array_slice(bytes_mrz, MRZ_EXPIRY_DATE_INDEX, MRZ_EXPIRY_DATE_INDEX + 6);
    let expiry_date = Date::from_bytes_short_year(
        expiry_date_bytes,
        [threshold_year_bytes[2], threshold_year_bytes[3]]
    );

    assert(current_date.lt(expiry_date));
}

fn proof_of_age(
    passport_data: PassportData,
    age_required: u8,
    is_limit_minimum: bool,
    current_date_bytes: [u8; 8]
) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let birthdate_bytes = utils::get_array_slice(bytes_mrz, MRZ_BIRTHDATE_INDEX, MRZ_BIRTHDATE_INDEX + 6);
    let birthdate = Date::from_bytes_short_year(
        birthdate_bytes,
        [current_date_bytes[2], current_date_bytes[3]]
    );

    let current_date = Date::from_bytes_long_year(current_date_bytes);

    let totalDuration = current_date.get_duration_in_days(birthdate, true);

    if is_limit_minimum {
        assert(totalDuration as i16 >= age_required as i16 * 365);
    } else {
        assert(totalDuration as i16 <= age_required as i16 * 365);
    }
}

fn proof_of_citizenship(passport_data: PassportData, country: [u8; 3]) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let country_bytes: [u8; 3] = utils::get_array_slice(bytes_mrz, MRZ_COUNTRY_INDEX, MRZ_COUNTRY_INDEX + 3);

    assert(country_bytes[0] == country[0]);
    assert(country_bytes[1] == country[1]);
    assert(country_bytes[2] == country[2]);
}

fn main(
    passport_data: PassportData,
    dsc_data: DSCData,
    // The CSCA certificates are public knowledge and 
    // we want to let verifiers use the CSCA certificate
    // that they got from a source they trust to verify the proof
    csca_cert_data: pub CSCACertData,
    // The current date is public so verifiers can check the date
    // provided to the proof is correct
    current_date: pub str<8>,
    // The minimum age required is public so verifiers can check
    // the age provided to the proof is correct
    min_age_required: pub u8,
    // The country is public so verifiers can check 
    // the country provided to the proof is correct
    country: pub str<3>
) {
    // Check the passport is not expired first
    // check_expiry(passport_data, current_date.as_bytes());
    // First verify the signature of the passport data
    verify_passport_signature(passport_data, dsc_data);
    // Then verify the signature of the DSC to make sure
    // it was signed by the CSCA certificate of the issuing State
    verify_dsc_signature(dsc_data, csca_cert_data);
    // Verify the age of the passport holder
    proof_of_age(passport_data, min_age_required, true, current_date.as_bytes());
    // Verify the country of the passport holder
    proof_of_citizenship(passport_data, country.as_bytes());
}
