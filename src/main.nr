use dep::std::println;
use dep::biguint::BigUint56;
use dep::rsa::{verify_rsa_sha256_pkcs1v15};
use dep::std::hash::sha256;

struct PassportData {
    // Result of multiple hashing and padding of the passport data
    e_content: [u8; 104],
    // The signature of the passport data
    encrypted_digest: [u8; 256],
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 256],
    quotient: [u8; 256],
}

struct DSCData {
    // The public key of the Document Signing Certificate (DSC)
    // Most likely a 2048-bit RSA key, so that's the size we set here
    // 256 bytes = 2048 bits
    pubkey: [u8; 256],
    // The signature of the DSC TBS certificate by the CSCA certificate
    // 512 bytes = 4096 bits
    signature: [u8; 512],
    // The TBS certificate of the DSC
    // TBS stands for To Be Signed
    tbs_certificate: [u8; 888],
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 512],
    quotient: [u8; 512],
}

struct CSCACertData {
    // The public key of the Country Signing Certificate Authority (CSCA)
    // Most likely a 4096-bit RSA key, so that's the size we set here
    // 512 bytes = 4096 bits
    pubkey: [u8; 512],
}

// Reverse the bytes of an array so you can switch from
// big endian to little endian order and vice versa
fn reverse_bytes_array<N>(arr: [u8; N]) -> [u8; N] {
    let mut reversed_arr = [0 as u8; N];
    for i in 0..N {
        // Reverse
        reversed_arr[i] = arr[N - 1 - i];
    }
    reversed_arr
}

fn verify_passport_signature(passport_data: PassportData, dsc_data: DSCData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.encrypted_digest));
    let pubkey_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(reverse_bytes_array(passport_data.quotient));

    let msg_hash = sha256(passport_data.e_content);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn verify_dsc_signature(dsc_data: DSCData, csca_cert_data: CSCACertData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.signature));
    let pubkey_biguint = BigUint56::from_bytes(reverse_bytes_array(csca_cert_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(reverse_bytes_array(dsc_data.quotient));

    let msg_hash = sha256(dsc_data.tbs_certificate);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn main(passport_data: PassportData, dsc_data: DSCData, csca_cert_data: CSCACertData) {
    verify_passport_signature(passport_data, dsc_data);
    verify_dsc_signature(dsc_data, csca_cert_data);
}
